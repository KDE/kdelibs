/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file org.kde.KMediaPlayer.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "kmediaplayeradaptor_p.h"
#include <QtCore/QArgument>
#include <QtCore/QByteRef>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KMediaPlayerAdaptor
 */

KMediaPlayerAdaptor::KMediaPlayerAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KMediaPlayerAdaptor::~KMediaPlayerAdaptor()
{
    // destructor
}

bool KMediaPlayerAdaptor::hasLength() const
{
    // get the value of property hasLength
    return qvariant_cast< bool >(parent()->property("hasLength"));
}

qlonglong KMediaPlayerAdaptor::length() const
{
    // get the value of property length
    return qvariant_cast< qlonglong >(parent()->property("length"));
}

bool KMediaPlayerAdaptor::isLooping() const
{
    // get the value of property looping
    return qvariant_cast< bool >(parent()->property("looping"));
}

void KMediaPlayerAdaptor::setLooping(bool value)
{
    // set the value of property looping
    parent()->setProperty("looping", value);
}

qlonglong KMediaPlayerAdaptor::position() const
{
    // get the value of property position
    return qvariant_cast< qlonglong >(parent()->property("position"));
}

bool KMediaPlayerAdaptor::isSeekable() const
{
    // get the value of property seekable
    return qvariant_cast< bool >(parent()->property("seekable"));
}

int KMediaPlayerAdaptor::state() const
{
    // get the value of property state
    return qvariant_cast< int >(parent()->property("state"));
}

void KMediaPlayerAdaptor::setState(int value)
{
    // set the value of property state
    parent()->setProperty("state", value);
}

bool KMediaPlayerAdaptor::openUrl(const QString &file)
{
    // handle method call org.kde.KMediaPlayer.openUrl
    bool out0;
    QMetaObject::invokeMethod(parent(), "openUrl", Q_RETURN_ARG(bool, out0), Q_ARG(QString, file));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->openUrl(file);
    return out0;
}

void KMediaPlayerAdaptor::pause()
{
    // handle method call org.kde.KMediaPlayer.pause
    QMetaObject::invokeMethod(parent(), "pause");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->pause();
}

void KMediaPlayerAdaptor::play()
{
    // handle method call org.kde.KMediaPlayer.play
    QMetaObject::invokeMethod(parent(), "play");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->play();
}

void KMediaPlayerAdaptor::seek(qlonglong msec)
{
    // handle method call org.kde.KMediaPlayer.seek
    QMetaObject::invokeMethod(parent(), "seek", Q_ARG(qlonglong, msec));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->seek(msec);
}

void KMediaPlayerAdaptor::stop()
{
    // handle method call org.kde.KMediaPlayer.stop
    QMetaObject::invokeMethod(parent(), "stop");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->stop();
}


#include "moc_kmediaplayeradaptor_p.cpp"
