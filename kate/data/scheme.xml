<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd">
<!--
  This file is part of KDE's kate project.
  
  copyright   : (C) 2004 by Dominik Haumann
  email       : dhdev at gmx dot de

  last change : 2004-03-12 (complete rewrite!)

 ***************************************************************************
 *                                                                         *
 *   This file is free software; you can redistribute it and/or modify     *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************
-->
<language version="1.05" kateversion="2.1" name="Scheme" section="Sources" extensions="*.scm;*.ss;*.scheme" mimetype="text/x-scheme" author="Dominik Haumann">
  <highlighting>
    <list name="keywords">
      <item> abs </item>
      <item> acos </item>
      <item> angle </item>
      <item> append </item>
      <item> applymap </item>
      <item> asin </item>
      <item> assoc </item>
      <item> assq </item>
      <item> assv </item>
      <item> atan </item>
      <item> boolean? </item>
      <item> caaaar </item>
      <item> caaadr </item>
      <item> caaar </item>
      <item> caadar </item>
      <item> caaddr </item>
      <item> caadr </item>
      <item> caar </item>
      <item> cadaar </item>
      <item> cadadr </item>
      <item> cadar </item>
      <item> caddar </item>
      <item> cadddr </item>
      <item> caddr </item>
      <item> cadr </item>
      <item> call/cc </item>
      <item> call-with-current-continuation </item>
      <item> call-with-input-file </item>
      <item> call-with-output-file </item>
      <item> call-with-values </item>
      <item> car </item>
      <item> cdaaar </item>
      <item> cdaadr </item>
      <item> cdaar </item>
      <item> cdadar </item>
      <item> cdaddr </item>
      <item> cdadr </item>
      <item> cdar </item>
      <item> cddaar </item>
      <item> cddadr </item>
      <item> cddar </item>
      <item> cdddar </item>
      <item> cddddr </item>
      <item> cdddr </item>
      <item> cddr </item>
      <item> cdr </item>
      <item> ceiling </item>
      <item> char-alphabetic? </item>
      <item> char-ci&lt;=? </item>
      <item> char-ci=? </item>
      <item> char-ci&gt;=? </item>
      <item> char-ci&gt;? </item>
      <item> char&lt;?c </item>
      <item> char-downcase </item>
      <item> char-&gt;integer </item>
      <item> char&lt;=? </item>
      <item> char=? </item>
      <item> char&gt;=? </item>
      <item> char&gt;? </item>
      <item> char? </item>
      <item> char-lower-case? </item>
      <item> char-numeric? </item>
      <item> char-ready? </item>
      <item> char-upcase </item>
      <item> char-upper-case? </item>
      <item> char-whitespace? </item>
      <item> close-input-port </item>
      <item> close-output-port </item>
      <item> complex? </item>
      <item> cons </item>
      <item> cos </item>
      <item> current-input-port </item>
      <item> current-output-port </item>
      <item> denominator </item>
      <item> display </item>
      <item> dynamic-wind </item>
      <item> eof-object? </item>
      <item> eq? </item>
      <item> equal? </item>
      <item> eqv? </item>
      <item> eval </item>
      <item> even? </item>
      <item> exact->inexact </item>
      <item> exact? </item>
      <item> exp </item>
      <item> expt </item>
      <item> floor </item>
      <item> force </item>
      <item> for-each </item>
      <item> gcd </item>
      <item> har-ci&lt;? </item>
      <item> imag-part </item>
      <item> inexact-&gt;exact </item>
      <item> inexact? </item>
      <item> input-port? </item>
      <item> integer-&gt;char </item>
      <item> integer? </item>
      <item> interaction-environment </item>
      <item> lcm </item>
      <item> length </item>
      <item> list </item>
      <item> list? </item>
      <item> list-ref </item>
      <item> list-&gt;string </item>
      <item> list-tail </item>
      <item> load </item>
      <item> log </item>
      <item> magnitude </item>
      <item> make-polar </item>
      <item> make-rectangular </item>
      <item> make-string </item>
      <item> make-vector </item>
      <item> max </item>
      <item> member </item>
      <item> memq </item>
      <item> memv </item>
      <item> min </item>
      <item> modulo </item>
      <item> negative? </item>
      <item> newline </item>
      <item> not </item>
      <item> null-environment </item>
      <item> null? </item>
      <item> number? </item>
      <item> number->string </item>
      <item> numerator </item>
      <item> odd? </item>
      <item> open-input-file </item>
      <item> open-output-file </item>
      <item> output-port? </item>
      <item> pair? </item>
      <item> peek-char </item>
      <item> port? </item>
      <item> positive? </item>
      <item> procedure? </item>
      <item> quotient </item>
      <item> rational? </item>
      <item> rationalize </item>
      <item> read-char </item>
      <item> read </item>
      <item> real? </item>
      <item> real-part </item>
      <item> remainder </item>
      <item> reverse </item>
      <item> round </item>
      <item> scheme-report-environment </item>
      <item> set-car! </item>
      <item> set-cdr! </item>
      <item> sin </item>
      <item> sqrt </item>
      <item> string-append </item>
      <item> string-ci&lt;=? </item>
      <item> string-ci&lt;? </item>
      <item> string-ci=? </item>
      <item> string-ci&gt;=? </item>
      <item> string-ci&gt;? </item>
      <item> string-copy </item>
      <item> string-fill! </item>
      <item> string&lt;=? </item>
      <item> string&lt;? </item>
      <item> string=? </item>
      <item> string&gt;=? </item>
      <item> string&gt;? </item>
      <item> string </item>
      <item> string? </item>
      <item> string-length </item>
      <item> string-&gt;list </item>
      <item> string-&gt;number </item>
      <item> string-ref </item>
      <item> string-set! </item>
      <item> string-&gt;symbol </item>
      <item> substring </item>
      <item> symbol? </item>
      <item> symbol-&gt;string </item>
      <item> tan </item>
      <item> transcript-off </item>
      <item> transcript-on </item>
      <item> truncate </item>
      <item> values </item>
      <item> vector-fill! </item>
      <item> vector </item>
      <item> vector? </item>
      <item> vector-length </item>
      <item> vector-&gt;listlist->vector </item>
      <item> vector-ref </item>
      <item> vector-set! </item>
      <item> with-input-from-file </item>
      <item> with-output-to-file </item>
      <item> write-char </item>
      <item> write </item>
      <item> zero? </item>
    </list>
    <list name="corewords">
      <item> and </item>
      <item> begin </item>
      <item> case </item>
      <item> cond </item>
      <item> define </item>
      <item> define-syntax </item>
      <item> delay </item>
      <item> do </item>
      <item> else </item>
      <item> if </item>
      <item> lambda </item>
      <item> let </item>
      <item> let* </item>
      <item> letrec </item>
      <item> letrec-syntax </item>
      <item> let-syntax </item>
      <item> or </item>
      <item> quasiquote </item>
      <item> quote </item>
      <item> set! </item>
      <item> syntax-rules </item>
      <item> unquote </item>
      <item> unquote-splicing </item>
    </list>
    <contexts>
      <context name="Normal" attribute="Normal" lineEndContext="#stay">
        <RegExpr attribute="Region Marker" context="#stay" String=";\s*BEGIN.*$" beginRegion="region"/>
        <RegExpr attribute="Region Marker" context="#stay" String=";\s*END.*$" endRegion="region"/>
        <RegExpr attribute="Comment" context="#stay" String=";.*$"/>
        <Detect2Chars attribute="Comment" context="MultiLineComment" char="|" char1="#" beginRegion="region"/>
        <DetectChar attribute="Brackets" context="#stay" char="("/>
        <DetectChar attribute="Brackets" context="#stay" char=")"/>
        <keyword attribute="Keyword" context="#stay" String="keywords"/>
        <keyword attribute="Scheme" context="#stay" String="corewords"/>
        <RegExpr attribute="Char" context="#stay" String="#\\."/>
        <DetectChar attribute="Comment" context="String" char="&quot;"/>
        <RegExpr attribute="Char" context="SpecialNumber" String="#[bodxei]"/>
        <RegExpr attribute="Decimal" context="#stay" String="#[tf]"/>
        <Float attribute="Float" context="#stay"/>
        <Int attribute="Decimal" context="#stay"/>
      </context>
      <context name="MultiLineComment" attribute="Comment" lineEndContext="#stay">
        <Detect2Chars attribute="Comment" context="#pop" char="#" char1="|" endRegion="region"/>
      </context>
      <context name="SpecialNumber" attribute="Normal" lineEndContext="#pop">
        <Float attribute="Float" context="#pop"/>
        <Int attribute="Decimal" context="#pop"/>
        <HlCOct attribute="BaseN" context="#pop"/>
        <HlCHex attribute="Float" context="#pop"/>
      </context>
      <context name="String" attribute="String" lineEndContext="#stay">
        <RegExpr attribute="Char" context="#stay" String="#\\."/>
        <DetectChar attribute="String" context="#pop" char="&quot;"/>
      </context>
    </contexts>
    <itemDatas>
      <itemData name="Normal"      defStyleNum="dsNormal"/>
      <itemData name="Keyword"     defStyleNum="dsKeyword"/>
      <itemData name="Scheme"      defStyleNum="dsKeyword" color="#d22811"/>
      <itemData name="Data"        defStyleNum="dsDataType"/>
      <itemData name="Decimal"     defStyleNum="dsDecVal"/>
      <itemData name="BaseN"       defStyleNum="dsBaseN"/>
      <itemData name="Float"       defStyleNum="dsFloat"/>
      <itemData name="Char"        defStyleNum="dsChar"/>
      <itemData name="String"      defStyleNum="dsString"/>
      <itemData name="Comment"     defStyleNum="dsComment"/>
<!--      <itemData name="Region Marker" defStyleNum="dsRegionMarker" />-->
      <itemData name="Region Marker" defStyleNum="dsNormal" color="#0000ff"/>
      <itemData name="Brackets"    defStyleNum="dsNormal" color="#0000ff" selColor="#00ff00" bold="1" italic="0"/>
    </itemDatas>
  </highlighting>
  <general>
    <keywords casesensitive="1" weakDeliminator="-*?!&lt;&gt;=/"/>
    <comments>
      <comment name="singleLine" start=";" />
      <comment name="multiLine" start="#|" end="|#" />
    </comments>
  </general>
</language>
