# This file handles all the logic for compiling KAuth's backends
include(ConfigureChecks.cmake)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# Configure a small file to tell BackendsManager what to use
configure_file(BackendsConfig.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/BackendsConfig.h)

set(libkauth_SRCS
    kauthaction.cpp
    kauthactionreply.cpp
    kauthexecutejob.cpp
    kauthobjectdecorator.cpp
    AuthBackend.cpp
    BackendsManager.cpp
    HelperProxy.cpp
    kauthhelpersupport.cpp
    backends/fake/FakeBackend.cpp
    backends/fakehelper/FakeHelperProxy.cpp
)

add_library(kauth ${libkauth_SRCS})
generate_export_header(kauth)

target_link_libraries(kauth Qt5::Widgets ${QT_QTDBUS_LIBRARY} kcoreaddons)
set_target_properties(kauth PROPERTIES VERSION   ${ECM_VERSION_STRING}
                                       SOVERSION ${ECM_SOVERSION}
)

# KAuth policy generator executable

# Compile only if fake backend has not been selected

if (NOT "${KDE4_AUTH_BACKEND_NAME}" STREQUAL "FAKE")
    # KAUTH_POLICY_GEN_SRCS has been generated from ConfigureChecks.cmake
    add_executable(kauth-policy-gen ${KAUTH_POLICY_GEN_SRCS})

    # KAUTH_POLICY_GEN_LIBRARIES has been generated from ConfigureChecks.cmake
    target_link_libraries( kauth-policy-gen ${KAUTH_POLICY_GEN_LIBRARIES} )

    install( TARGETS kauth-policy-gen EXPORT kdelibsToolsTargets DESTINATION ${LIBEXEC_INSTALL_DIR})
endif (NOT "${KDE4_AUTH_BACKEND_NAME}" STREQUAL "FAKE")

if ( NOT WINCE )
    # KAuth backend plugin

    if (NOT "${KDE4_AUTH_BACKEND_NAME}" STREQUAL "FAKE")
        set(KAUTH_BACKEND_SRCS ${KAUTH_BACKEND_SRCS})
	# KAuth::AuthBackend is not exported
        add_library(kauth_backend_plugin MODULE ${KAUTH_BACKEND_SRCS} AuthBackend.cpp)
        target_link_libraries(kauth_backend_plugin ${KAUTH_BACKEND_LIBS})
        set_target_properties(kauth_backend_plugin PROPERTIES PREFIX "")
        install(TARGETS kauth_backend_plugin
                LIBRARY DESTINATION ${KAUTH_BACKEND_PLUGIN_DIR}
                ARCHIVE DESTINATION ${KAUTH_BACKEND_PLUGIN_DIR}
                RUNTIME DESTINATION ${KAUTH_BACKEND_PLUGIN_DIR}
        )
    endif (NOT "${KDE4_AUTH_BACKEND_NAME}" STREQUAL "FAKE")

    # KAuth helper plugin

    if (NOT "${KDE4_AUTH_HELPER_BACKEND_NAME}" STREQUAL "FAKE")
        # KAuth::HelperProxy is not exported
        add_library(kauth_helper_plugin MODULE ${KAUTH_HELPER_BACKEND_SRCS} HelperProxy.cpp)
        target_link_libraries(kauth_helper_plugin ${KAUTH_HELPER_BACKEND_LIBS})
        set_target_properties(kauth_helper_plugin PROPERTIES PREFIX "")
        install(TARGETS kauth_helper_plugin
                LIBRARY DESTINATION ${KAUTH_HELPER_PLUGIN_DIR}
                ARCHIVE DESTINATION ${KAUTH_HELPER_PLUGIN_DIR}
                RUNTIME DESTINATION ${KAUTH_HELPER_PLUGIN_DIR}
        )
    endif (NOT "${KDE4_AUTH_HELPER_BACKEND_NAME}" STREQUAL "FAKE")
endif ( NOT WINCE )

install(TARGETS kauth EXPORT kdelibsLibraryTargets ${ECM_TARGET_DEFAULT_ARGS})

install(FILES
    kauthaction.h
    kauthactionreply.h
    kauthexecutejob.h
    kauthhelpersupport.h
    kauthobjectdecorator.h
    kauth.h
    ${CMAKE_CURRENT_BINARY_DIR}/kauth_export.h
    DESTINATION ${INCLUDE_INSTALL_DIR} COMPONENT Devel
)

# TODO: Remove once we depend on polkit-qt1 > 0.99.0
# core/polkitqt1-actiondescription.h from polkit currently fails when built with -pedantic
string(REPLACE "--pedantic-errors" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
string(REPLACE "-pedantic-errors" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
string(REPLACE "--pedantic" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
string(REPLACE "-pedantic" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
