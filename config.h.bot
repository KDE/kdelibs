/* this is included everywhere anyway (mostly indirecty)
   and we need it for socklen_t being always available */
#include <sys/types.h>

/* provide a definition for a 32 bit entity, usable as a typedef, possibly
   extended by "unsigned" */
#undef INT32_BASETYPE
#ifdef SIZEOF_INT
#if SIZEOF_INT == 4
#define INT32_BASETYPE int
#endif
#endif
#if !defined(INT32_BASETYPE) && defined(SIZEOF_LONG)
#if SIZEOF_LONG == 4
#define INT32_BASETYPE long
#endif
#endif
#ifndef INT32_BASETYPE
#define INT32_BASETYPE int
#endif

/* this is needed for Solaris and others */
#ifndef HAVE_GETDOMAINNAME_PROTO
#define HAVE_GETDOMAINNAME_PROTO
#ifdef __cplusplus
extern "C"
#endif
int getdomainname (char *Name, int Namelen);
#endif  

#ifndef HAVE_GETHOSTNAME_PROTO
#define HAVE_GETHOSTNAME_PROTO
#ifdef __cplusplus  
extern "C" 
#endif
int gethostname (char *Name, int Namelen);
#endif  

/*
 * jpeg.h needs HAVE_BOOLEAN, when the system uses boolean in system
 * headers and I'm too lazy to write a configure test as long as only
 * unixware is related
 */
#ifdef _UNIXWARE
#define HAVE_BOOLEAN
#endif

/* random() returns a value between 0 and RANDOM_MAX.
 * RANDOM_MAX is needed to generate good random numbers. (Nicolas)
 */
#ifndef HAVE_RANDOM
#define HAVE_RANDOM
#define RANDOM_MAX 2^31 
#ifdef __cplusplus  
extern "C" 
#endif
long int random(void); /* defined in fakes.c */
#ifdef __cplusplus  
extern "C" 
#endif
void srandom(unsigned int seed);
#else
/* normal random() */
#define RANDOM_MAX RAND_MAX 
#endif

#ifndef HAVE_SETEUID
#define HAVE_SETEUID
#define HAVE_SETEUID_FAKE
#ifdef __cplusplus
extern "C"
#endif
int seteuid(INT32_BASETYPE euid); /* defined in fakes.c */
#endif

#ifndef HAVE_S_ISSOCK
#define HAVE_S_ISSOCK
#define S_ISSOCK(mode) (1==0)
#endif

/* this is for Tru64 Unix (alias OSF, alias Digital Unix) */

#ifdef __osf__
#if !defined(__STDC__) || !__STDC__
#define __STDC__  1
#endif
#define SOL_TCP 6
typedef unsigned int   u_int32_t;
typedef unsigned char  uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int   uint32_t;
#include <stdarg.h>          /* va_start and the like */
#define RTLD_GLOBAL 0        /* dlopen flag not known under Tru64  */
#ifndef HAVE_USLEEP          /* usleep not defined in Tru64        */
#ifdef __cplusplus  
extern "C" void usleep(unsigned int);
#else
void usleep(unsigned int);
#endif
#endif
#ifdef __cplusplus  
extern "C" {
#endif
#include <sys/mount.h>
int getmntinfo(struct statfs **mntbufp, int flags);
#include <sys/fs_types.h>    /* for mnt_names[] */
#ifdef __cplusplus
}
#endif
#endif

/*
 * On HP-UX, the declaration of vsnprintf() is needed every time !
 */
 
#if !defined(HAVE_VSNPRINTF) || defined(hpux)
#if __STDC__
#include <stdarg.h>
#include <stdlib.h>
#else
#include <varargs.h>
#endif
#ifdef __cplusplus
extern "C"
#endif
int vsnprintf(char *str, size_t n, char const *fmt, va_list ap);
#ifdef __cplusplus  
extern "C" 
#endif
int snprintf(char *str, size_t n, char const *fmt, ...);
#endif

/* Bloody HP-UX (10.20) headers don't define all the res_xxx functions,
   although they are there.  */
#if defined(hpux) && defined(HAVE_RES_INIT)
#ifdef __cplusplus
extern "C"
#endif
void res_init (void);
#endif

#if !defined(HAVE_SETENV)
#ifdef __cplusplus  
extern "C" 
#endif
int setenv(const char *name, const char *value, int overwrite);
#endif

#if !defined(HAVE_UNSETENV)
#ifdef __cplusplus  
extern "C" 
#endif
int unsetenv(const char *name);
#endif

#if !defined(HAVE_MKSTEMPS)
#ifdef __cplusplus  
extern "C" 
#endif
int mkstemps (char* _template, int suffix_len); /* defined in fakes.c */
#endif


#if !defined(HAVE_MKSTEMP)
#define HAVE_MKSTEMP
#ifdef __cplusplus
extern "C"
#endif
int mkstemp (char* _template); /* defined in fakes.c */
#endif

/*
 * AIX defines FD_SET in terms of bzero, but fails to include <strings.h>
 * that defines bzero. 
 */

#if defined(_AIX)
#include <strings.h>
#endif

/*
 * AIX prior to 4.3.3ml8 fails to provide a declaration for initgroups()
 */
#if defined(HAVE_INITGROUPS) && !defined(HAVE_INITGROUPS_PROTO)
#include <grp.h>
#ifdef __cplusplus
extern "C"
#endif
int initgroups(char *, gid_t);  /* missing declaration in AIX < 5.1 */
#endif

/*
 * Steven Schultz <sms@to.gd-es.com> tells us :
 * BSD/OS 4.2 doesn't have a prototype for openpty in its system header files
 */
#ifdef __bsdi__
__BEGIN_DECLS
int openpty(int *, int *, char *, struct termios *, struct winsize *);
__END_DECLS
#endif

