
/*  A Bison parser, made from grammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse kjsyyparse
#define yylex kjsyylex
#define yyerror kjsyyerror
#define yylval kjsyylval
#define yychar kjsyychar
#define yydebug kjsyydebug
#define yynerrs kjsyynerrs
#define YYLSP_NEEDED

#define	NULLTOKEN	257
#define	TRUETOKEN	258
#define	FALSETOKEN	259
#define	STRING	260
#define	NUMBER	261
#define	BREAK	262
#define	CASE	263
#define	DEFAULT	264
#define	FOR	265
#define	NEW	266
#define	VAR	267
#define	CONTINUE	268
#define	FUNCTION	269
#define	RETURN	270
#define	VOID	271
#define	DELETE	272
#define	IF	273
#define	THIS	274
#define	DO	275
#define	WHILE	276
#define	ELSE	277
#define	IN	278
#define	INSTANCEOF	279
#define	TYPEOF	280
#define	SWITCH	281
#define	WITH	282
#define	RESERVED	283
#define	THROW	284
#define	TRY	285
#define	CATCH	286
#define	FINALLY	287
#define	EQEQ	288
#define	NE	289
#define	STREQ	290
#define	STRNEQ	291
#define	LE	292
#define	GE	293
#define	OR	294
#define	AND	295
#define	PLUSPLUS	296
#define	MINUSMINUS	297
#define	LSHIFT	298
#define	RSHIFT	299
#define	URSHIFT	300
#define	PLUSEQUAL	301
#define	MINUSEQUAL	302
#define	MULTEQUAL	303
#define	DIVEQUAL	304
#define	LSHIFTEQUAL	305
#define	RSHIFTEQUAL	306
#define	URSHIFTEQUAL	307
#define	ANDEQUAL	308
#define	MODEQUAL	309
#define	XOREQUAL	310
#define	OREQUAL	311
#define	IDENT	312
#define	AUTO	313

#line 1 "grammar.y"


/*
 *  This file is part of the KDE libraries
 *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <string.h>
#include "kjs.h"
#include "nodes.h"
#include "lexer.h"

/* default values for bison */
#define YYDEBUG 0
#define YYMAXDEPTH 0
#ifdef KJS_DEBUGGER
#define YYERROR_VERBOSE
#define DBG(l, s, e) { l->setLoc(s.first_line, e.last_line); } // location
#else
#undef YYLSP_NEEDED
#define DBG(l, s, e)
#endif

extern int yylex();
int yyerror (const char *);
bool automatic();

using namespace KJS;


#line 49 "grammar.y"
typedef union {
  int                 ival;
  double              dval;
  UString             *ustr;
  Node                *node;
  StatementNode       *stat;
  ParameterNode       *param;
  FunctionBodyNode    *body;
  FuncDeclNode        *func;
  ProgramNode         *prog;
  AssignExprNode      *init;
  SourceElementNode   *src;
  SourceElementsNode  *srcs;
  StatListNode        *slist;
  ArgumentsNode       *args;
  ArgumentListNode    *alist;
  VarDeclNode         *decl;
  VarDeclListNode     *vlist;
  CaseBlockNode       *cblk;
  ClauseListNode      *clist;
  CaseClauseNode      *ccl;
  ElementNode         *elm;
  ElisionNode         *eli;
  Operator            op;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		358
#define	YYFLAG		-32768
#define	YYNTBASE	84

#define YYTRANSLATE(x) ((unsigned)(x) <= 313 ? yytranslate[x] : 148)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    73,     2,     2,     2,    75,    78,     2,    61,
    62,    74,    70,    67,    71,    69,    60,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    68,    83,    76,
    82,    77,    81,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    65,     2,    66,    79,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    63,    80,    64,    72,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    24,    27,    31,    35,    39,    45,    48,    53,    54,
    56,    58,    61,    65,    71,    73,    75,    77,    79,    81,
    86,    90,    94,    96,    99,   102,   105,   110,   114,   117,
   121,   123,   127,   129,   131,   133,   136,   139,   141,   144,
   147,   150,   153,   157,   160,   164,   167,   170,   173,   176,
   178,   182,   186,   190,   192,   196,   200,   202,   206,   210,
   214,   216,   220,   224,   228,   232,   236,   240,   242,   246,
   250,   254,   258,   260,   264,   266,   270,   272,   276,   278,
   282,   284,   288,   290,   296,   298,   302,   304,   306,   308,
   310,   312,   314,   316,   318,   320,   322,   324,   326,   328,
   332,   334,   336,   338,   340,   342,   344,   346,   348,   350,
   352,   354,   356,   358,   360,   363,   367,   369,   372,   376,
   380,   382,   386,   388,   391,   394,   396,   399,   402,   408,
   416,   423,   429,   439,   450,   458,   467,   477,   478,   480,
   483,   486,   490,   494,   497,   500,   504,   508,   511,   514,
   518,   522,   528,   534,   538,   544,   545,   547,   549,   552,
   556,   561,   564,   568,   572,   576,   580,   584,   589,   595,
   598,   604,   611,   616,   622,   624,   628,   631,   635,   637,
   639,   642,   644
};

static const short yyrhs[] = {     3,
     0,     4,     0,     5,     0,     7,     0,     6,     0,    60,
     0,    20,     0,    58,     0,    84,     0,    86,     0,    61,
   113,    62,     0,    63,    64,     0,    63,    90,    64,     0,
    65,    88,    66,     0,    65,    87,    66,     0,    65,    87,
    67,    88,    66,     0,    88,   111,     0,    87,    67,    88,
   111,     0,     0,    89,     0,    67,     0,    89,    67,     0,
    91,    68,   111,     0,    90,    67,    91,    68,   111,     0,
    58,     0,     6,     0,     7,     0,    85,     0,   142,     0,
    92,    65,   113,    66,     0,    92,    69,    58,     0,    12,
    92,    95,     0,    92,     0,    12,    93,     0,    92,    95,
     0,    94,    95,     0,    94,    65,   113,    66,     0,    94,
    69,    58,     0,    61,    62,     0,    61,    96,    62,     0,
   111,     0,    96,    67,   111,     0,    93,     0,    94,     0,
    97,     0,    97,    42,     0,    97,    43,     0,    98,     0,
    18,    99,     0,    17,    99,     0,    26,    99,     0,    42,
    99,     0,    59,    42,    99,     0,    43,    99,     0,    59,
    43,    99,     0,    70,    99,     0,    71,    99,     0,    72,
    99,     0,    73,    99,     0,    99,     0,   100,    74,    99,
     0,   100,    60,    99,     0,   100,    75,    99,     0,   100,
     0,   101,    70,   100,     0,   101,    71,   100,     0,   101,
     0,   102,    44,   101,     0,   102,    45,   101,     0,   102,
    46,   101,     0,   102,     0,   103,    76,   102,     0,   103,
    77,   102,     0,   103,    38,   102,     0,   103,    39,   102,
     0,   103,    25,   102,     0,   103,    24,   102,     0,   103,
     0,   104,    34,   103,     0,   104,    35,   103,     0,   104,
    36,   103,     0,   104,    37,   103,     0,   104,     0,   105,
    78,   104,     0,   105,     0,   106,    79,   104,     0,   106,
     0,   107,    80,   104,     0,   107,     0,   108,    41,   107,
     0,   108,     0,   109,    40,   108,     0,   109,     0,   109,
    81,   111,    68,   111,     0,   110,     0,    97,   112,   111,
     0,    82,     0,    47,     0,    48,     0,    49,     0,    50,
     0,    51,     0,    52,     0,    53,     0,    54,     0,    56,
     0,    57,     0,    55,     0,   111,     0,   113,    67,   111,
     0,   115,     0,   117,     0,   121,     0,   122,     0,   123,
     0,   124,     0,   126,     0,   127,     0,   128,     0,   129,
     0,   130,     0,   136,     0,   137,     0,   138,     0,    63,
    64,     0,    63,   116,    64,     0,   114,     0,   116,   114,
     0,    13,   118,    83,     0,    13,   118,     1,     0,   119,
     0,   118,    67,   119,     0,    58,     0,    58,   120,     0,
    82,   111,     0,    83,     0,   113,    83,     0,   113,     1,
     0,    19,    61,   113,    62,   114,     0,    19,    61,   113,
    62,   114,    23,   114,     0,    21,   114,    22,    61,   113,
    62,     0,    22,    61,   113,    62,   114,     0,    11,    61,
   125,    83,   125,    83,   125,    62,   114,     0,    11,    61,
    13,   118,    83,   125,    83,   125,    62,   114,     0,    11,
    61,    97,    24,   113,    62,   114,     0,    11,    61,    13,
    58,    24,   113,    62,   114,     0,    11,    61,    13,    58,
   120,    24,   113,    62,   114,     0,     0,   113,     0,    14,
    83,     0,    14,     1,     0,    14,    58,    83,     0,    14,
    58,     1,     0,     8,    83,     0,     8,     1,     0,     8,
    58,    83,     0,     8,    58,     1,     0,    16,    83,     0,
    16,     1,     0,    16,   113,    83,     0,    16,   113,     1,
     0,    28,    61,   113,    62,   114,     0,    27,    61,   113,
    62,   131,     0,    63,   132,    64,     0,    63,   132,   135,
   132,    64,     0,     0,   133,     0,   134,     0,   133,   134,
     0,     9,   113,    68,     0,     9,   113,    68,   116,     0,
    10,    68,     0,    10,    68,   116,     0,    58,    68,   114,
     0,    30,   113,    83,     0,    31,   115,   139,     0,    31,
   115,   140,     0,    31,   115,   139,   140,     0,    32,    61,
    58,    62,   115,     0,    33,   115,     0,    15,    58,    61,
    62,   144,     0,    15,    58,    61,   143,    62,   144,     0,
    15,    61,    62,   144,     0,    15,    61,   143,    62,   144,
     0,    58,     0,   143,    67,    58,     0,    63,    64,     0,
    63,   146,    64,     0,   146,     0,   147,     0,   146,   147,
     0,   114,     0,   141,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   156,   158,   159,   160,   161,   162,   167,   169,   171,   172,
   173,   174,   175,   178,   180,   181,   184,   186,   190,   192,
   195,   197,   200,   202,   206,   209,   210,   213,   215,   216,
   217,   219,   222,   224,   227,   229,   230,   231,   234,   236,
   239,   241,   244,   246,   249,   251,   252,   255,   257,   258,
   259,   260,   261,   262,   263,   264,   265,   266,   267,   270,
   272,   273,   274,   277,   279,   280,   283,   285,   286,   287,
   290,   292,   294,   296,   298,   300,   302,   306,   308,   309,
   310,   311,   314,   316,   319,   321,   324,   326,   329,   331,
   335,   337,   341,   343,   347,   349,   353,   355,   356,   357,
   358,   359,   360,   361,   362,   363,   364,   365,   368,   370,
   373,   375,   376,   377,   378,   379,   380,   381,   382,   383,
   384,   385,   386,   387,   390,   392,   395,   397,   400,   403,
   412,   414,   418,   420,   423,   427,   431,   434,   441,   443,
   447,   449,   450,   453,   456,   459,   463,   469,   471,   474,
   476,   480,   482,   489,   491,   495,   497,   505,   507,   511,
   512,   518,   523,   528,   530,   534,   536,   539,   541,   544,
   546,   549,   551,   554,   560,   564,   566,   567,   570,   574,
   578,   581,   585,   587,   592,   594,   598,   600,   603,   608,
   610,   613,   615
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NULLTOKEN",
"TRUETOKEN","FALSETOKEN","STRING","NUMBER","BREAK","CASE","DEFAULT","FOR","NEW",
"VAR","CONTINUE","FUNCTION","RETURN","VOID","DELETE","IF","THIS","DO","WHILE",
"ELSE","IN","INSTANCEOF","TYPEOF","SWITCH","WITH","RESERVED","THROW","TRY","CATCH",
"FINALLY","EQEQ","NE","STREQ","STRNEQ","LE","GE","OR","AND","PLUSPLUS","MINUSMINUS",
"LSHIFT","RSHIFT","URSHIFT","PLUSEQUAL","MINUSEQUAL","MULTEQUAL","DIVEQUAL",
"LSHIFTEQUAL","RSHIFTEQUAL","URSHIFTEQUAL","ANDEQUAL","MODEQUAL","XOREQUAL",
"OREQUAL","IDENT","AUTO","'/'","'('","')'","'{'","'}'","'['","']'","','","':'",
"'.'","'+'","'-'","'~'","'!'","'*'","'%'","'<'","'>'","'&'","'^'","'|'","'?'",
"'='","';'","Literal","PrimaryExpr","ArrayLiteral","ElementList","ElisionOpt",
"Elision","PropertyNameAndValueList","PropertyName","MemberExpr","NewExpr","CallExpr",
"Arguments","ArgumentList","LeftHandSideExpr","PostfixExpr","UnaryExpr","MultiplicativeExpr",
"AdditiveExpr","ShiftExpr","RelationalExpr","EqualityExpr","BitwiseANDExpr",
"BitwiseXORExpr","BitwiseORExpr","LogicalANDExpr","LogicalORExpr","ConditionalExpr",
"AssignmentExpr","AssignmentOperator","Expr","Statement","Block","StatementList",
"VariableStatement","VariableDeclarationList","VariableDeclaration","Initializer",
"EmptyStatement","ExprStatement","IfStatement","IterationStatement","ExprOpt",
"ContinueStatement","BreakStatement","ReturnStatement","WithStatement","SwitchStatement",
"CaseBlock","CaseClausesOpt","CaseClauses","CaseClause","DefaultClause","LabelledStatement",
"ThrowStatement","TryStatement","Catch","Finally","FunctionDeclaration","FunctionExpr",
"FormalParameterList","FunctionBody","Program","SourceElements","SourceElement", NULL
};
#endif

static const short yyr1[] = {     0,
    84,    84,    84,    84,    84,    84,    85,    85,    85,    85,
    85,    85,    85,    86,    86,    86,    87,    87,    88,    88,
    89,    89,    90,    90,    91,    91,    91,    92,    92,    92,
    92,    92,    93,    93,    94,    94,    94,    94,    95,    95,
    96,    96,    97,    97,    98,    98,    98,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,   100,
   100,   100,   100,   101,   101,   101,   102,   102,   102,   102,
   103,   103,   103,   103,   103,   103,   103,   104,   104,   104,
   104,   104,   105,   105,   106,   106,   107,   107,   108,   108,
   109,   109,   110,   110,   111,   111,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   113,   113,
   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   114,   115,   115,   116,   116,   117,   117,
   118,   118,   119,   119,   120,   121,   122,   122,   123,   123,
   124,   124,   124,   124,   124,   124,   124,   125,   125,   126,
   126,   126,   126,   127,   127,   127,   127,   128,   128,   128,
   128,   129,   130,   131,   131,   132,   132,   133,   133,   134,
   134,   135,   135,   136,   137,   138,   138,   138,   139,   140,
   141,   141,   142,   142,   143,   143,   144,   144,   145,   146,
   146,   147,   147
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     2,     3,     3,     3,     5,     2,     4,     0,     1,
     1,     2,     3,     5,     1,     1,     1,     1,     1,     4,
     3,     3,     1,     2,     2,     2,     4,     3,     2,     3,
     1,     3,     1,     1,     1,     2,     2,     1,     2,     2,
     2,     2,     3,     2,     3,     2,     2,     2,     2,     1,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     3,
     1,     3,     3,     3,     3,     3,     3,     1,     3,     3,
     3,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     1,     3,     1,     5,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     3,     1,     2,     3,     3,
     1,     3,     1,     2,     2,     1,     2,     2,     5,     7,
     6,     5,     9,    10,     7,     8,     9,     0,     1,     2,
     2,     3,     3,     2,     2,     3,     3,     2,     2,     3,
     3,     5,     5,     3,     5,     0,     1,     1,     2,     3,
     4,     2,     3,     3,     3,     3,     3,     4,     5,     2,
     5,     6,     4,     5,     1,     3,     2,     3,     1,     1,
     2,     1,     1
};

static const short yydefact[] = {     0,
     1,     2,     3,     5,     4,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     8,     0,     6,     0,     0,
    19,     0,     0,     0,     0,   136,     9,    28,    10,    33,
    43,    44,    45,    48,    60,    64,    67,    71,    78,    83,
    85,    87,    89,    91,    93,    95,   109,     0,   192,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   193,    29,   189,   190,   155,     0,   154,
   148,     0,     8,     0,    33,    34,   133,     0,   131,   151,
     0,   150,     0,     0,   159,   158,     0,    45,    50,    49,
     0,     0,     0,    51,     0,     0,     0,     0,     0,    52,
    54,     0,     0,     0,     0,     5,     4,     8,    12,     0,
     0,   127,     0,    21,     0,     0,    20,    56,    57,    58,
    59,     0,     0,     0,    35,     0,     0,    36,    46,    47,
    98,    99,   100,   101,   102,   103,   104,   105,   108,   106,
   107,    97,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   138,     0,   137,
   191,   157,   156,     0,    45,   149,     0,    26,    27,    25,
    12,    32,     0,   134,   130,     0,   129,   153,   152,     0,
   185,     0,     0,   161,   160,     0,     0,     0,     0,     0,
   175,   125,     0,     0,   176,   177,   174,    53,    55,    11,
    13,     0,     0,   126,   128,    15,    19,    14,    17,    22,
    39,     0,    41,     0,    31,     0,    38,    96,    62,    61,
    63,    65,    66,    68,    69,    70,    77,    76,    74,    75,
    72,    73,    79,    80,    81,    82,    84,    86,    88,    90,
    92,     0,   110,   133,     0,     0,   148,   135,   132,     0,
     0,     0,   183,     0,     0,     0,     0,     0,     0,     0,
     0,   180,   178,     0,    23,     0,    40,     0,    30,    37,
     0,     0,   134,   148,     0,     0,   181,     0,   187,     0,
   184,   186,   139,     0,   142,   166,   163,   162,     0,     0,
    16,    18,    42,    94,     0,     0,     0,     0,   148,   182,
   188,     0,   141,     0,     0,   167,   168,     0,    24,     0,
     0,   148,   145,     0,   140,     0,     0,   164,   166,   169,
   179,   146,     0,     0,     0,   170,   172,     0,   147,     0,
   143,   171,   173,   165,   144,     0,     0,     0
};

static const short yydefgoto[] = {    37,
    38,    39,   125,   126,   127,   120,   121,    40,    41,    42,
   135,   232,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,   153,    58,    59,
    60,   123,    61,    88,    89,   194,    62,    63,    64,    65,
   187,    66,    67,    68,    69,    70,   307,   325,   326,   327,
   339,    71,    72,    73,   215,   216,    74,    75,   203,   273,
   356,    76,    77
};

static const short yypact[] = {   699,
-32768,-32768,-32768,-32768,-32768,     2,   -29,   121,    34,     4,
   129,   227,  1171,  1171,    42,-32768,   772,    89,  1171,   107,
   128,  1171,    -7,  1171,  1171,    62,    -2,-32768,  1171,   334,
   124,  1171,  1171,  1171,  1171,-32768,-32768,-32768,-32768,    51,
-32768,    73,   769,-32768,-32768,    69,    90,   210,    72,   201,
   115,    60,   145,   186,   -13,-32768,-32768,    11,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   699,-32768,-32768,     5,-32768,
   887,   168,-32768,   101,    51,-32768,   161,    15,-32768,-32768,
     6,-32768,   185,    28,-32768,-32768,    16,    27,-32768,-32768,
  1171,   230,  1171,-32768,  1171,  1171,   -59,   407,   144,-32768,
-32768,   772,  1171,  1171,    -4,   192,   194,    62,   853,   157,
   196,-32768,   480,-32768,   153,   958,   215,-32768,-32768,-32768,
-32768,  1029,  1171,   225,-32768,  1171,   226,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,
  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,  1171,
  1171,  1171,  1171,  1171,  1171,  1171,  1171,-32768,  1171,-32768,
-32768,-32768,-32768,   231,    -5,   228,   211,-32768,-32768,-32768,
-32768,-32768,  1171,-32768,-32768,    34,-32768,-32768,-32768,    61,
-32768,   233,    17,-32768,-32768,    55,   241,    78,    84,    85,
-32768,-32768,   242,    -7,   271,-32768,-32768,-32768,-32768,-32768,
-32768,    23,  1171,-32768,-32768,-32768,   124,-32768,-32768,-32768,
-32768,    96,-32768,   174,-32768,   191,-32768,-32768,-32768,-32768,
-32768,    69,    69,    90,    90,    90,   210,   210,   210,   210,
   210,   210,    72,    72,    72,    72,   201,   201,   201,   145,
   186,   239,-32768,   -15,   -44,  1171,  1171,-32768,-32768,   233,
   100,   553,-32768,   233,   250,   772,  1171,   772,   246,   772,
   253,-32768,-32768,   244,-32768,  1100,-32768,  1171,-32768,-32768,
  1171,  1171,   290,  1171,   116,   234,-32768,   233,-32768,   626,
-32768,-32768,   293,   118,-32768,   310,-32768,-32768,   258,  1171,
-32768,-32768,-32768,-32768,   155,  1171,   238,   772,  1171,-32768,
-32768,   772,-32768,  1171,    12,   310,-32768,    -7,-32768,   772,
   156,  1171,-32768,   260,-32768,   200,   256,-32768,   310,-32768,
-32768,-32768,   772,   263,   772,   772,   772,   268,-32768,   772,
-32768,   772,   772,-32768,-32768,   327,   343,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   130,-32768,-32768,   122,   326,   350,-32768,
   -24,-32768,    40,-32768,     1,   117,   112,     8,    80,   105,
-32768,-32768,   184,   187,-32768,-32768,  -122,-32768,    -1,   -17,
   -22,   -66,-32768,   182,   171,   104,-32768,-32768,-32768,-32768,
  -201,-32768,-32768,-32768,-32768,-32768,-32768,    30,-32768,    44,
-32768,-32768,-32768,-32768,-32768,   158,-32768,-32768,   172,  -161,
-32768,    99,   -74
};


#define	YYLAST		1244


static const short yytable[] = {   102,
   109,   181,    78,   229,    90,   182,   198,   179,   292,   233,
    97,   178,   122,    99,   100,   195,   204,   138,   266,   104,
   107,   337,   196,   211,   110,   111,   176,   115,   188,   189,
   238,    81,   128,   129,   130,   131,   139,   140,   294,   113,
   114,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,    98,    98,   262,   108,   263,   220,    98,    79,
   192,    91,   179,    98,    98,   296,   193,   177,   139,   140,
   268,    98,    98,    98,    98,   338,   152,   179,   274,   186,
   190,   196,   179,   275,    80,   201,    92,   183,   199,   202,
   122,    87,   317,   180,   217,   162,   163,   197,   205,   206,
   285,   208,   101,   209,   210,   225,   188,   189,   297,   164,
   165,   132,   301,   218,   219,   133,   276,   334,   201,   134,
   185,   179,   270,     1,     2,     3,     4,     5,   154,   112,
   344,   234,     8,   132,   236,    82,   320,   136,   173,   278,
    16,   137,   155,   156,   179,   279,   280,   166,   167,   103,
   179,   179,    98,    98,   239,   240,   241,   287,   190,   157,
   158,   298,   288,   312,   191,   313,   275,   105,   314,   247,
   248,   249,   250,   251,   252,   213,   214,   318,    83,   323,
    28,    29,   179,    84,   179,    31,    93,   329,   106,    94,
   124,   282,   172,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,   330,   343,   226,   227,
   221,   179,   179,   222,   174,   181,   175,    95,    94,     1,
     2,     3,     4,     5,   168,   169,   170,   171,     8,   289,
   179,    82,   193,    13,    14,   200,    16,   253,   254,   255,
   256,   207,    19,   159,   160,   161,   290,   179,   303,   -26,
   305,   -27,   308,   223,   295,   186,   179,   346,    24,    25,
   244,   245,   246,   242,   243,   304,   257,   258,   259,   352,
   353,   230,   235,   237,    83,    27,    28,    29,   264,    84,
   315,    31,   186,   267,   179,   272,    32,    33,    34,    35,
   333,   277,   281,   214,   335,   341,   291,   302,   306,    96,
   309,   310,   342,   316,   331,   322,   319,   186,   324,   328,
   332,   345,   336,   347,   350,   349,   357,   351,   122,   122,
   186,   354,   355,    85,   225,   225,     1,     2,     3,   116,
   117,     6,   358,   284,     7,     8,     9,    10,    82,    12,
    13,    14,    15,    16,    17,    18,   286,    86,   260,    19,
    20,    21,   261,    22,    23,   265,   269,   293,   348,   340,
   300,   271,   283,     0,     0,    24,    25,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   118,    27,    28,    29,     0,    30,   119,    31,     0,
     0,     0,     0,    32,    33,    34,    35,     0,     0,     1,
     2,     3,     4,     5,     6,     0,    36,     7,     8,     9,
    10,    82,    12,    13,    14,    15,    16,    17,    18,     0,
     0,     0,    19,    20,    21,     0,    22,    23,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    24,    25,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    26,    27,    28,    29,     0,    30,
   212,    31,     0,     0,     0,     0,    32,    33,    34,    35,
     0,     0,     1,     2,     3,     4,     5,     6,     0,    36,
     7,     8,     9,    10,    82,    12,    13,    14,    15,    16,
    17,    18,     0,     0,     0,    19,    20,    21,     0,    22,
    23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    24,    25,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    26,    27,    28,
    29,     0,    30,   224,    31,     0,     0,     0,     0,    32,
    33,    34,    35,     0,     0,     1,     2,     3,     4,     5,
     6,     0,    36,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,    19,    20,
    21,     0,    22,    23,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    24,    25,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    26,    27,    28,    29,     0,    30,   299,    31,     0,     0,
     0,     0,    32,    33,    34,    35,     0,     0,     1,     2,
     3,     4,     5,     6,     0,    36,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,     0,     0,
     0,    19,    20,    21,     0,    22,    23,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    24,    25,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    26,    27,    28,    29,     0,    30,   321,
    31,     0,     0,     0,     0,    32,    33,    34,    35,     0,
     0,     1,     2,     3,     4,     5,     6,     0,    36,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,     0,     0,     0,    19,    20,    21,     0,    22,    23,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    26,    27,    28,    29,
     0,    30,     0,    31,     0,     0,     0,     0,    32,    33,
    34,    35,     0,     0,     1,     2,     3,     4,     5,     6,
     0,    36,     7,     8,     9,    10,    82,    12,    13,    14,
    15,    16,    17,    18,     0,     0,     0,    19,    20,    21,
     0,    22,    23,     0,     0,     0,     0,     0,     0,     0,
   139,   140,     0,    24,    25,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,   151,     0,     0,     0,    26,
    27,    28,    29,     0,    30,     0,    31,     0,     0,     0,
     0,    32,    33,    34,    35,     0,     0,     0,     0,     0,
   152,     0,  -125,     0,    36,  -125,  -125,  -125,  -125,  -125,
  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,
  -125,  -125,  -125,  -125,  -125,  -125,     0,     0,  -125,  -125,
  -125,     0,  -125,  -125,     0,     0,     0,     0,     0,     1,
     2,     3,     4,     5,     0,     0,     0,     0,     8,   184,
     0,    82,     0,    13,    14,     0,    16,     0,     0,     0,
  -125,  -125,    19,     0,     0,  -125,  -125,     0,     0,     0,
     0,     0,     0,     0,  -125,  -125,     0,     0,    24,    25,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    83,    27,    28,    29,     0,    84,
     0,    31,     0,     0,     0,     0,    32,    33,    34,    35,
     1,     2,     3,     4,     5,     0,     0,     0,     0,     8,
     0,     0,    82,     0,    13,    14,     0,    16,     0,     0,
     0,     0,     0,    19,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
    25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    83,    27,    28,    29,     0,
    84,     0,    31,   228,     0,     0,     0,    32,    33,    34,
    35,     1,     2,     3,     4,     5,     0,     0,     0,     0,
     8,     0,     0,    82,     0,    13,    14,     0,    16,     0,
     0,     0,     0,     0,    19,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    83,    27,    28,    29,
   231,    84,     0,    31,     0,     0,     0,     0,    32,    33,
    34,    35,     1,     2,     3,     4,     5,     0,     0,     0,
     0,     8,     0,     0,    82,     0,    13,    14,     0,    16,
     0,     0,     0,     0,     0,    19,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    24,    25,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    83,    27,    28,
    29,     0,    84,     0,    31,   311,     0,     0,     0,    32,
    33,    34,    35,     1,     2,     3,     4,     5,     0,     0,
     0,     0,     8,     0,     0,    82,     0,    13,    14,     0,
    16,     0,     0,     0,     0,     0,    19,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    24,    25,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    83,    27,
    28,    29,     0,    84,     0,    31,     0,     0,     0,     0,
    32,    33,    34,    35
};

static const short yycheck[] = {    17,
    23,    76,     1,   126,     1,     1,     1,    67,    24,   132,
    12,     1,    30,    13,    14,     1,     1,    42,    24,    19,
    22,    10,    67,    83,    24,    25,    40,    29,     6,     7,
   153,    61,    32,    33,    34,    35,    42,    43,    83,    42,
    43,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    13,    14,   177,    63,   179,    62,    19,    58,
    85,    58,    67,    24,    25,   267,    82,    81,    42,    43,
   193,    32,    33,    34,    35,    64,    82,    67,    62,    81,
    58,    67,    67,    67,    83,    58,    83,    83,    83,    62,
   108,    58,   294,    83,   112,    24,    25,    83,    83,   101,
   223,   103,    61,   105,   106,   123,     6,     7,   270,    38,
    39,    61,   274,   113,   114,    65,    62,   319,    58,    69,
    81,    67,    62,     3,     4,     5,     6,     7,    60,    68,
   332,   133,    12,    61,   136,    15,   298,    65,    79,    62,
    20,    69,    74,    75,    67,    62,    62,    76,    77,    61,
    67,    67,   113,   114,   154,   155,   156,    62,    58,    70,
    71,    62,    67,   286,    64,   288,    67,    61,   291,   162,
   163,   164,   165,   166,   167,    32,    33,    62,    58,    62,
    60,    61,    67,    63,    67,    65,    58,   310,    61,    61,
    67,   214,    78,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,    62,    62,    66,    67,
    64,    67,    67,    67,    80,   300,    41,     1,    61,     3,
     4,     5,     6,     7,    34,    35,    36,    37,    12,    66,
    67,    15,    82,    17,    18,    61,    20,   168,   169,   170,
   171,    22,    26,    44,    45,    46,    66,    67,   276,    68,
   278,    68,   280,    68,   266,   267,    67,    68,    42,    43,
   159,   160,   161,   157,   158,   277,   172,   173,   174,   346,
   347,    67,    58,    58,    58,    59,    60,    61,    58,    63,
   292,    65,   294,    83,    67,    63,    70,    71,    72,    73,
   318,    61,    61,    33,   322,   328,    68,    58,    63,    83,
    58,    68,   330,    24,   316,    23,    83,   319,     9,    62,
    83,    62,   324,    68,    62,   343,     0,   345,   346,   347,
   332,    64,   350,     8,   352,   353,     3,     4,     5,     6,
     7,     8,     0,   222,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,   227,     8,   175,    26,
    27,    28,   176,    30,    31,   184,   196,   264,   339,   326,
   272,   200,   215,    -1,    -1,    42,    43,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    -1,    63,    64,    65,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,     3,
     4,     5,     6,     7,     8,    -1,    83,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
    -1,    -1,    26,    27,    28,    -1,    30,    31,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    60,    61,    -1,    63,
    64,    65,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
    -1,    -1,     3,     4,     5,     6,     7,     8,    -1,    83,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    -1,    -1,    -1,    26,    27,    28,    -1,    30,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    -1,    63,    64,    65,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    -1,    -1,     3,     4,     5,     6,     7,
     8,    -1,    83,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    26,    27,
    28,    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    60,    61,    -1,    63,    64,    65,    -1,    -1,
    -1,    -1,    70,    71,    72,    73,    -1,    -1,     3,     4,
     5,     6,     7,     8,    -1,    83,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
    -1,    26,    27,    28,    -1,    30,    31,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    60,    61,    -1,    63,    64,
    65,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
    -1,     3,     4,     5,     6,     7,     8,    -1,    83,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    -1,    26,    27,    28,    -1,    30,    31,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,
    -1,    63,    -1,    65,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    -1,    -1,     3,     4,     5,     6,     7,     8,
    -1,    83,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    -1,    -1,    -1,    26,    27,    28,
    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    42,    43,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    -1,    -1,    -1,    58,
    59,    60,    61,    -1,    63,    -1,    65,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
    82,    -1,     0,    -1,    83,     3,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    -1,    -1,    26,    27,
    28,    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,     3,
     4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,    13,
    -1,    15,    -1,    17,    18,    -1,    20,    -1,    -1,    -1,
    58,    59,    26,    -1,    -1,    63,    64,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    72,    73,    -1,    -1,    42,    43,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    60,    61,    -1,    63,
    -1,    65,    -1,    -1,    -1,    -1,    70,    71,    72,    73,
     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,
    -1,    -1,    15,    -1,    17,    18,    -1,    20,    -1,    -1,
    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,    -1,
    63,    -1,    65,    66,    -1,    -1,    -1,    70,    71,    72,
    73,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
    12,    -1,    -1,    15,    -1,    17,    18,    -1,    20,    -1,
    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,
    62,    63,    -1,    65,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,     3,     4,     5,     6,     7,    -1,    -1,    -1,
    -1,    12,    -1,    -1,    15,    -1,    17,    18,    -1,    20,
    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    -1,    63,    -1,    65,    66,    -1,    -1,    -1,    70,
    71,    72,    73,     3,     4,     5,     6,     7,    -1,    -1,
    -1,    -1,    12,    -1,    -1,    15,    -1,    17,    18,    -1,
    20,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    60,    61,    -1,    63,    -1,    65,    -1,    -1,    -1,    -1,
    70,    71,    72,    73
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/misc/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 157 "grammar.y"
{ yyval.node = new NullNode(); ;
    break;}
case 2:
#line 158 "grammar.y"
{ yyval.node = new BooleanNode(true); ;
    break;}
case 3:
#line 159 "grammar.y"
{ yyval.node = new BooleanNode(false); ;
    break;}
case 4:
#line 160 "grammar.y"
{ yyval.node = new NumberNode(yyvsp[0].dval); ;
    break;}
case 5:
#line 161 "grammar.y"
{ yyval.node = new StringNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 6:
#line 162 "grammar.y"
{ Lexer *l = Lexer::curr();
                                     if (!l->scanRegExp()) YYABORT;
                                     yyval.node = new RegExpNode(l->pattern,l->flags);;
    break;}
case 7:
#line 168 "grammar.y"
{ yyval.node = new ThisNode(); ;
    break;}
case 8:
#line 169 "grammar.y"
{ yyval.node = new ResolveNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 11:
#line 173 "grammar.y"
{ yyval.node = new GroupNode(yyvsp[-1].node); ;
    break;}
case 12:
#line 174 "grammar.y"
{ yyval.node = new ObjectLiteralNode(0L); ;
    break;}
case 13:
#line 175 "grammar.y"
{ yyval.node = new ObjectLiteralNode(yyvsp[-1].node); ;
    break;}
case 14:
#line 179 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].eli); ;
    break;}
case 15:
#line 180 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].elm); ;
    break;}
case 16:
#line 181 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].eli, yyvsp[-3].elm); ;
    break;}
case 17:
#line 185 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 18:
#line 187 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-3].elm, yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 19:
#line 191 "grammar.y"
{ yyval.eli = 0L; ;
    break;}
case 21:
#line 196 "grammar.y"
{ yyval.eli = new ElisionNode(0L); ;
    break;}
case 22:
#line 197 "grammar.y"
{ yyval.eli = new ElisionNode(yyvsp[-1].eli); ;
    break;}
case 23:
#line 201 "grammar.y"
{ yyval.node = new PropertyValueNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 24:
#line 203 "grammar.y"
{ yyval.node = new PropertyValueNode(yyvsp[-2].node, yyvsp[0].node, yyvsp[-4].node); ;
    break;}
case 25:
#line 207 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 26:
#line 209 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 27:
#line 210 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].dval); ;
    break;}
case 30:
#line 216 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 31:
#line 217 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 32:
#line 219 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 34:
#line 224 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[0].node); ;
    break;}
case 35:
#line 228 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 36:
#line 229 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 37:
#line 230 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 38:
#line 231 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, yyvsp[0].ustr); ;
    delete yyvsp[0].ustr; break;}
case 39:
#line 235 "grammar.y"
{ yyval.args = new ArgumentsNode(0L); ;
    break;}
case 40:
#line 236 "grammar.y"
{ yyval.args = new ArgumentsNode(yyvsp[-1].alist); ;
    break;}
case 41:
#line 240 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[0].node); ;
    break;}
case 42:
#line 241 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[-2].alist, yyvsp[0].node); ;
    break;}
case 46:
#line 251 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpPlusPlus); ;
    break;}
case 47:
#line 252 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpMinusMinus); ;
    break;}
case 49:
#line 257 "grammar.y"
{ yyval.node = new DeleteNode(yyvsp[0].node); ;
    break;}
case 50:
#line 258 "grammar.y"
{ yyval.node = new VoidNode(yyvsp[0].node); ;
    break;}
case 51:
#line 259 "grammar.y"
{ yyval.node = new TypeOfNode(yyvsp[0].node); ;
    break;}
case 52:
#line 260 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 53:
#line 261 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 54:
#line 262 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 55:
#line 263 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 56:
#line 264 "grammar.y"
{ yyval.node = new UnaryPlusNode(yyvsp[0].node); ;
    break;}
case 57:
#line 265 "grammar.y"
{ yyval.node = new NegateNode(yyvsp[0].node); ;
    break;}
case 58:
#line 266 "grammar.y"
{ yyval.node = new BitwiseNotNode(yyvsp[0].node); ;
    break;}
case 59:
#line 267 "grammar.y"
{ yyval.node = new LogicalNotNode(yyvsp[0].node); ;
    break;}
case 61:
#line 272 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '*'); ;
    break;}
case 62:
#line 273 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '/'); ;
    break;}
case 63:
#line 274 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node,yyvsp[0].node,'%'); ;
    break;}
case 65:
#line 279 "grammar.y"
{ yyval.node = new AddNode(yyvsp[-2].node, yyvsp[0].node, '+'); ;
    break;}
case 66:
#line 280 "grammar.y"
{ yyval.node = new AddNode(yyvsp[-2].node, yyvsp[0].node, '-'); ;
    break;}
case 68:
#line 285 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpLShift, yyvsp[0].node); ;
    break;}
case 69:
#line 286 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpRShift, yyvsp[0].node); ;
    break;}
case 70:
#line 287 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpURShift, yyvsp[0].node); ;
    break;}
case 72:
#line 293 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLess, yyvsp[0].node); ;
    break;}
case 73:
#line 295 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreater, yyvsp[0].node); ;
    break;}
case 74:
#line 297 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLessEq, yyvsp[0].node); ;
    break;}
case 75:
#line 299 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreaterEq, yyvsp[0].node); ;
    break;}
case 76:
#line 301 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpInstanceOf, yyvsp[0].node); ;
    break;}
case 77:
#line 303 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpIn, yyvsp[0].node); ;
    break;}
case 79:
#line 308 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpEqEq, yyvsp[0].node); ;
    break;}
case 80:
#line 309 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpNotEq, yyvsp[0].node); ;
    break;}
case 81:
#line 310 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrEq, yyvsp[0].node); ;
    break;}
case 82:
#line 311 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrNEq, yyvsp[0].node);;
    break;}
case 84:
#line 316 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitAnd, yyvsp[0].node); ;
    break;}
case 86:
#line 321 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitXOr, yyvsp[0].node); ;
    break;}
case 88:
#line 326 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitOr, yyvsp[0].node); ;
    break;}
case 90:
#line 332 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpAnd, yyvsp[0].node); ;
    break;}
case 92:
#line 338 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpOr, yyvsp[0].node); ;
    break;}
case 94:
#line 344 "grammar.y"
{ yyval.node = new ConditionalNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 96:
#line 350 "grammar.y"
{ yyval.node = new AssignNode(yyvsp[-2].node, yyvsp[-1].op, yyvsp[0].node);;
    break;}
case 97:
#line 354 "grammar.y"
{ yyval.op = OpEqual; ;
    break;}
case 98:
#line 355 "grammar.y"
{ yyval.op = OpPlusEq; ;
    break;}
case 99:
#line 356 "grammar.y"
{ yyval.op = OpMinusEq; ;
    break;}
case 100:
#line 357 "grammar.y"
{ yyval.op = OpMultEq; ;
    break;}
case 101:
#line 358 "grammar.y"
{ yyval.op = OpDivEq; ;
    break;}
case 102:
#line 359 "grammar.y"
{ yyval.op = OpLShift; ;
    break;}
case 103:
#line 360 "grammar.y"
{ yyval.op = OpRShift; ;
    break;}
case 104:
#line 361 "grammar.y"
{ yyval.op = OpURShift; ;
    break;}
case 105:
#line 362 "grammar.y"
{ yyval.op = OpAndEq; ;
    break;}
case 106:
#line 363 "grammar.y"
{ yyval.op = OpXOrEq; ;
    break;}
case 107:
#line 364 "grammar.y"
{ yyval.op = OpOrEq; ;
    break;}
case 108:
#line 365 "grammar.y"
{ yyval.op = OpModEq; ;
    break;}
case 110:
#line 370 "grammar.y"
{ yyval.node = new CommaNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 125:
#line 391 "grammar.y"
{ yyval.stat = new BlockNode(0L); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 126:
#line 392 "grammar.y"
{ yyval.stat = new BlockNode(yyvsp[-1].slist); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 127:
#line 396 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[0].stat); ;
    break;}
case 128:
#line 397 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[-1].slist, yyvsp[0].stat); ;
    break;}
case 129:
#line 401 "grammar.y"
{ yyval.stat = new VarStatementNode(yyvsp[-1].vlist);
                                      DBG(yyval.stat, yylsp[-2], yylsp[0]); ;
    break;}
case 130:
#line 403 "grammar.y"
{ if (automatic()) {
                                          yyval.stat = new VarStatementNode(yyvsp[-1].vlist);
					  DBG(yyval.stat, yylsp[-2], yylsp[-1]);
                                        } else {
					  YYABORT;
					}
                                      ;
    break;}
case 131:
#line 413 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[0].decl); ;
    break;}
case 132:
#line 415 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[-2].vlist, yyvsp[0].decl); ;
    break;}
case 133:
#line 419 "grammar.y"
{ yyval.decl = new VarDeclNode(yyvsp[0].ustr, 0); delete yyvsp[0].ustr; ;
    break;}
case 134:
#line 420 "grammar.y"
{ yyval.decl = new VarDeclNode(yyvsp[-1].ustr, yyvsp[0].init); delete yyvsp[-1].ustr; ;
    break;}
case 135:
#line 424 "grammar.y"
{ yyval.init = new AssignExprNode(yyvsp[0].node); ;
    break;}
case 136:
#line 428 "grammar.y"
{ yyval.stat = new EmptyStatementNode(); ;
    break;}
case 137:
#line 432 "grammar.y"
{ yyval.stat = new ExprStatementNode(yyvsp[-1].node);
                                     DBG(yyval.stat, yylsp[-1], yylsp[0]); ;
    break;}
case 138:
#line 434 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ExprStatementNode(yyvsp[-1].node);
				       DBG(yyval.stat, yylsp[-1], yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 139:
#line 442 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-2].node,yyvsp[0].stat,0L);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 140:
#line 444 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-4].node,yyvsp[-2].stat,yyvsp[0].stat);DBG(yyval.stat,yylsp[-6],yylsp[-3]); ;
    break;}
case 141:
#line 448 "grammar.y"
{ yyval.stat=new DoWhileNode(yyvsp[-4].stat,yyvsp[-1].node);DBG(yyval.stat,yylsp[-5],yylsp[-3]);;
    break;}
case 142:
#line 449 "grammar.y"
{ yyval.stat = new WhileNode(yyvsp[-2].node,yyvsp[0].stat);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 143:
#line 451 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].node,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-8],yylsp[-1]); ;
    break;}
case 144:
#line 454 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].vlist,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-9],yylsp[-1]); ;
    break;}
case 145:
#line 457 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-6],yylsp[-1]); ;
    break;}
case 146:
#line 460 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].ustr,0L,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-7],yylsp[-1]);
                                     delete yyvsp[-4].ustr; ;
    break;}
case 147:
#line 464 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-5].ustr,yyvsp[-4].init,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-8],yylsp[-1]);
                                     delete yyvsp[-5].ustr; ;
    break;}
case 148:
#line 470 "grammar.y"
{ yyval.node = 0L; ;
    break;}
case 150:
#line 475 "grammar.y"
{ yyval.stat = new ContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 151:
#line 476 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]);
                                     } else
				       YYABORT; ;
    break;}
case 152:
#line 480 "grammar.y"
{ yyval.stat = new ContinueNode(yyvsp[-1].ustr); DBG(yyval.stat,yylsp[-2],yylsp[0]);
                                     delete yyvsp[-1].ustr; ;
    break;}
case 153:
#line 482 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ContinueNode(yyvsp[-1].ustr);DBG(yyval.stat,yylsp[-2],yylsp[-1]);
				       delete yyvsp[-1].ustr;
                                     } else
				       YYABORT; ;
    break;}
case 154:
#line 490 "grammar.y"
{ yyval.stat = new BreakNode();DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 155:
#line 491 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new BreakNode(); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 156:
#line 495 "grammar.y"
{ yyval.stat = new BreakNode(yyvsp[-1].ustr); DBG(yyval.stat,yylsp[-2],yylsp[0]);
                                     delete yyvsp[-1].ustr; ;
    break;}
case 157:
#line 497 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new BreakNode(yyvsp[-1].ustr); DBG(yyval.stat,yylsp[-2],yylsp[-1]);
				       delete yyvsp[-1].ustr;
                                     } else
				       YYABORT;
                                   ;
    break;}
case 158:
#line 506 "grammar.y"
{ yyval.stat = new ReturnNode(0L); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 159:
#line 507 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ReturnNode(0L); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 160:
#line 511 "grammar.y"
{ yyval.stat = new ReturnNode(yyvsp[-1].node); ;
    break;}
case 161:
#line 512 "grammar.y"
{ if (automatic())
                                       yyval.stat = new ReturnNode(yyvsp[-1].node);
                                     else
				       YYABORT; ;
    break;}
case 162:
#line 519 "grammar.y"
{ yyval.stat = new WithNode(yyvsp[-2].node,yyvsp[0].stat);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 163:
#line 524 "grammar.y"
{ yyval.stat = new SwitchNode(yyvsp[-2].node, yyvsp[0].cblk);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 164:
#line 529 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-1].clist, 0L, 0L); ;
    break;}
case 165:
#line 531 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-3].clist, yyvsp[-2].ccl, yyvsp[-1].clist); ;
    break;}
case 166:
#line 535 "grammar.y"
{ yyval.clist = 0L; ;
    break;}
case 168:
#line 540 "grammar.y"
{ yyval.clist = new ClauseListNode(yyvsp[0].ccl); ;
    break;}
case 169:
#line 541 "grammar.y"
{ yyval.clist = yyvsp[-1].clist->append(yyvsp[0].ccl); ;
    break;}
case 170:
#line 545 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-1].node, 0L); ;
    break;}
case 171:
#line 546 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-2].node, yyvsp[0].slist); ;
    break;}
case 172:
#line 550 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, 0L);; ;
    break;}
case 173:
#line 551 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, yyvsp[0].slist); ;
    break;}
case 174:
#line 555 "grammar.y"
{ yyvsp[0].stat->pushLabel(yyvsp[-2].ustr);
                                     yyval.stat = new LabelNode(yyvsp[-2].ustr, yyvsp[0].stat);
                                     delete yyvsp[-2].ustr; ;
    break;}
case 175:
#line 561 "grammar.y"
{ yyval.stat = new ThrowNode(yyvsp[-1].node); ;
    break;}
case 176:
#line 565 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, yyvsp[0].node); ;
    break;}
case 177:
#line 566 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, 0L, yyvsp[0].node); ;
    break;}
case 178:
#line 567 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-2].stat, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 179:
#line 571 "grammar.y"
{ yyval.node = new CatchNode(yyvsp[-2].ustr, yyvsp[0].stat); delete yyvsp[-2].ustr; ;
    break;}
case 180:
#line 575 "grammar.y"
{ yyval.node = new FinallyNode(yyvsp[0].stat); ;
    break;}
case 181:
#line 579 "grammar.y"
{ yyval.func = new FuncDeclNode(yyvsp[-3].ustr, 0L, yyvsp[0].body);
                                             delete yyvsp[-3].ustr; ;
    break;}
case 182:
#line 582 "grammar.y"
{ yyval.func = new FuncDeclNode(yyvsp[-4].ustr, yyvsp[-2].param, yyvsp[0].body);
                                     delete yyvsp[-4].ustr; ;
    break;}
case 183:
#line 586 "grammar.y"
{ yyval.node = new FuncExprNode(0L, yyvsp[0].body); ;
    break;}
case 184:
#line 588 "grammar.y"
{ yyval.node = new FuncExprNode(yyvsp[-2].param, yyvsp[0].body); ;
    break;}
case 185:
#line 593 "grammar.y"
{ yyval.param = new ParameterNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 186:
#line 594 "grammar.y"
{ yyval.param = yyvsp[-2].param->append(yyvsp[0].ustr);
	                             delete yyvsp[0].ustr; ;
    break;}
case 187:
#line 599 "grammar.y"
{ yyval.body = new FunctionBodyNode(0L); ;
    break;}
case 188:
#line 600 "grammar.y"
{ yyval.body = new FunctionBodyNode(yyvsp[-1].srcs); ;
    break;}
case 189:
#line 604 "grammar.y"
{ yyval.prog = new ProgramNode(yyvsp[0].srcs);
                                     KJScriptImp::current()->setProgNode(yyval.prog); ;
    break;}
case 190:
#line 609 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[0].src); ;
    break;}
case 191:
#line 610 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[-1].srcs, yyvsp[0].src); ;
    break;}
case 192:
#line 614 "grammar.y"
{ yyval.src = new SourceElementNode(yyvsp[0].stat); ;
    break;}
case 193:
#line 615 "grammar.y"
{ yyval.src = new SourceElementNode(yyvsp[0].func); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/misc/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 618 "grammar.y"


int yyerror (const char *)  /* Called by yyparse on error */
{
//  fprintf(stderr, "ERROR: %s at line %d\n",
//	  s, KJScript::lexer()->lineNo());
  return 1;
}

/* may we automatically insert a semicolon ? */
bool automatic()
{
  if (yychar == '}' || yychar == 0)
    return true;
  else if (Lexer::curr()->prevTerminator())
    return true;

  return false;
}
