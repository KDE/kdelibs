# solidConfig.cmake provides information about the installed solid library.
# It can be used directly from CMake via find_package(solid NO_MODULE)
#
# The following CMake variables are provided:
#   solid_VERSION_MAJOR - the major version number of solid
#   solid_VERSION_MINOR - the minor version number of solid
#   solid_VERSION_PATCH - the patch version number of solid
#   solid_INCLUDE_DIRS  - the include directories to use
#   solid_LIBRARIES     - the libraries to link against
#   solid_LIBRARY_DIR   - the directory where the solid libraries are installed. This may be useful for setting RPATH.
#   solid_HAVE_WINDOWS_WBEM - TRUE if WBEM is supported as backend under Windows
#   solid_HAVE_HerqqUPnP    - TRUE if UPnP via Herqq (http://www.herqq.org) is supported
#   solid_HAVE_UDev         - TRUE if device discovery via udev is supported
#   solid_USE_UDisk2        - TRUE is udisk2 is used instead of udisk on UNIX systems
#
# Additionally, the following imported library targets are created, which may be used directly
# with target_link_libraries():
#   KF5::solid - the solid library

@PACKAGE_INIT@

# Any changes in this ".cmake" file will be overwritten by CMake, the source is the ".cmake.in" file.

set(solid_VERSION_MAJOR "@SOLID_VERSION_MAJOR@")
set(solid_VERSION_MINOR "@SOLID_VERSION_MINOR@")
set(solid_VERSION_PATCH "@SOLID_VERSION_PATCH@")

set(solid_INSTALL_PREFIX "@PACKAGE_CMAKE_INSTALL_PREFIX@")
set_and_check(solid_INCLUDE_DIR    "@PACKAGE_INCLUDE_INSTALL_DIR@")

if(NOT TARGET KF5::solid)
  include("${CMAKE_CURRENT_LIST_DIR}/solidTargets.cmake")
endif()


# "public" variables:

set(solid_INCLUDE_DIRS "${solid_INCLUDE_DIR}" )
set(solid_LIBRARIES KF5::solid )

set(solid_HAVE_WINDOWS_WBEM @WBEM_FOUND@ )

set(solid_HAVE_HerqqUPnP @HUPNP_FOUND@ )

set(solid_HAVE_UDev @UDEV_FOUND@ )

set(solid_USE_UDisk2 @WITH_SOLID_UDISKS2@ )

