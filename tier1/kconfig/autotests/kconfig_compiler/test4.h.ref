// This file is generated by kconfig_compiler from test4.kcfg.
// All changes you do to this file will be lost.
#ifndef TEST4_H
#define TEST4_H

#include <kconfigskeleton.h>
#include <QDebug>

class Test4 : public KConfigSkeleton
{
  public:
    class EnumMouseAction
    {
      public:
      enum type { Encrypt, Decrypt, CrashNBurn, PumpNDump, COUNT };
    };
    class EnumButton
    {
      public:
      enum type { right, mid, left, COUNT };
      static const char* const enumToString[];
    };

    static Test4 *self();
    ~Test4();

    /**
      Set Block colors.
    */
    static
    void setColor( int i, const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Color%1" ).arg( i ) ))
        self()->mColor[i] = v;
    }

    /**
      Get Block colors.
    */
    static
    QColor color( int i )
    {
      return self()->mColor[i];
    }

    /**
      Set Mouse actions.
    */
    static
    void setMouseAction( int i, int v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "MouseAction%1" ).arg( QLatin1String( EnumButton::enumToString[i] ) ) ))
        self()->mMouseAction[i] = v;
    }

    /**
      Get Mouse actions.
    */
    static
    int mouseAction( int i )
    {
      return self()->mMouseAction[i];
    }

    /**
      Set Gray colors.
    */
    static
    void setGrayColor( int i, const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "GrayColor%1" ).arg( i ) ))
        self()->mGrayColor[i] = v;
    }

    /**
      Get Gray colors.
    */
    static
    QColor grayColor( int i )
    {
      return self()->mGrayColor[i];
    }

    /**
      Set Gray colors as string.
    */
    static
    void setColorString( int i, const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "ColorString%1" ).arg( i ) ))
        self()->mColorString[i] = v;
    }

    /**
      Get Gray colors as string.
    */
    static
    QString colorString( int i )
    {
      return self()->mColorString[i];
    }

    /**
      Set foo bar
    */
    static
    void setFooBar( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "FooBar" ) ))
        self()->mFooBar = v;
    }

    /**
      Get foo bar
    */
    static
    QString fooBar()
    {
      return self()->mFooBar;
    }

    /**
      Set Age
    */
    static
    void setAge( int v )
    {
      if (v < 8)
      {
        qDebug() << "setAge: value " << v << " is less than the minimum value of 8";
        v = 8;
      }

      if (v > 88)
      {
        qDebug() << "setAge: value " << v << " is greater than the maximum value of 88";
        v = 88;
      }

      if (!self()->isImmutable( QString::fromLatin1( "Age" ) ))
        self()->mAge = v;
    }

    /**
      Get Age
    */
    static
    int age()
    {
      return self()->mAge;
    }

  protected:
    Test4();
    friend class Test4Helper;


    // Foo
    QColor mColor[4];
    int mMouseAction[3];
    QColor mGrayColor[11];
    QString mColorString[11];
    QString mFooBar;
    int mAge;

  private:
};

#endif

