* Style sheets
- check interpretation of generated keywords in HTML
+ crystal clear documentation: where does the code come from and how was it
  modified, what were the reasons for it. (in which case the structure of the
  files does not need to be similar)
+ fix ALT= and </P> problems: Will happen when mediaobject is used instead of
  graphic and when the library is used.  The </P> problem is unsolved as yet,
  but patched in the CSS style sheets.
- othercredit: translators should be inserted
  author/authorgroup: what it says
  contrib: contributors to the *text*
  othercredit: translators and proofreaders
  Distinction should be made between text and software (and indicated)
  ChangeLog: in reference doc and ChangeLog file - not in documentation
  Translators can change: lang attribute in top element, id attribute in all
  but anchors, othercredits: add translators and contributors to translation
  RevHistory: changes to the text(!)
- abstract: make more clear from layout (?)
- make list of authors/contributors from code, and put them at the back of the
  document if html, at the front on verso if printed
- decide on swapover date for patches (and make old version available)
- make script that allows to check if entities are out of date (*.dsl is too
  hard) from English
- investigate olinks
- Add language to link to chunk is that it is different (both in HTML
  and in the visible text)
- check changes with new versions of style sheets
- maintenance dsl (for web pages)
- fpi dsl
- Fix RFC1766 problem

* DocBook
- Tidy up the DTD
- introduce a versioning system (and scripts to generate the Makefile.ams)
- write style checker
+ redo the declarations following the example NW gave for qandasets
  (that may simplify the redeclaration files a lot)
- set up scheme for upgrading the DTD.  If restrictions are
  introduced, the number must go up by one.  Every doc should get
  highest version against which its validates.  New docs should take
  the current version.
  (script that checks and updates DTD FPIs in documentation; script
  that checks when a DTD FPI is not needed anymore; script that
  validates all documents in a tree and records the errors somewhere;
  put DTDs on line)  What about file naming conventions for versions
  (so that they can be re-used) - automatic checking from source tree:
  translations should only be told off when there is a difference with
  the English source of the same version.
- mediaobject should always be accompanied by a text alternative
- fixe role list for othercredit

* Other
- make clear: indexterm use (so that index can be activated)
- anchors can be requested by programmers (change as little as possible)
- guidelines/checker
- different types of links and targets
- make clear other functionality can be requested by documentation writers (eg
  line numbering, etc.)
- Provide info for Postscript (and source code) (with link?)
- consider format script and all options, ... in SGML file (~ DB-CDROM)
- create tool that builds graphics library (and a catalog in the same dir)
  (use pngmeta-1.10 to find the sizes)
- create scripts for catalog files and document entities
- Language specific parts in document (eg links to dictionaries etc should be
  done with an entity), eg in Translation howto
- Write FPI script (for external references).
- decide on distinction notice and full license (and adapt files 
  accordingly)
- CSS: position graphics centered or let text flow around them
- reorganize DTDs such that independent parts are really independent
  and have their own catalogs.  That should make versioning easier.
  Versioning should happen with subdirectories that contain the files
  of a given version, until that one is used no longer in the
  documentation.  (write script to check that)

* Meaning of characters:
 `*' indicates a TODO item
 `-' indicates a TODO subitem, no action taken
 `+' indicates a TODO subitem, some action was taken, but not finished
 Finished items are removed
